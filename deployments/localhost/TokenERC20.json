{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "initialSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "approveAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbdceea0533b099015c248f34efff62b19d972efacd4b25d455d69c9ad5488e4c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1328510",
    "logsBloom": "0x
    "blockHash": "0xd483a7cd2283befe8dab137b57b90380203c729a8c49b0dccfd34ade7686c041",
    "transactionHash": "0xbdceea0533b099015c248f34efff62b19d972efacd4b25d455d69c9ad5488e4c",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1328510",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1000000000000000000000000",
    "FToken",
    "FTK"
  ],
  "numDeployments": 1,
  "solcInputHash": "5f532efdbbf9644b70a1e22b9d8062d1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"_spender\":\"The address authorized to spend\",\"_value\":\"the max amount they can spend\"}},\"approveAndCall(address,uint256,bytes)\":{\"params\":{\"_extraData\":\"some extra information to send to the approved contract\",\"_spender\":\"The address authorized to spend\",\"_value\":\"the max amount they can spend\"}},\"burn(uint256)\":{\"params\":{\"_value\":\"the amount of money to burn\"}},\"burnFrom(address,uint256)\":{\"params\":{\"_from\":\"the address of the sender\",\"_value\":\"the amount of money to burn\"}},\"transfer(address,uint256)\":{\"params\":{\"_to\":\"The address of the recipient\",\"_value\":\"the amount to send\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"_from\":\"The address of the sender\",\"_to\":\"The address of the recipient\",\"_value\":\"the amount to send\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Set allowance for other address Allows `_spender` to spend no more than `_value` tokens on your behalf\"},\"approveAndCall(address,uint256,bytes)\":{\"notice\":\"Set allowance for other address and notify Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\"},\"burn(uint256)\":{\"notice\":\"Destroy tokens Remove `_value` tokens from the system irreversibly\"},\"burnFrom(address,uint256)\":{\"notice\":\"Destroy tokens from other account Remove `_value` tokens from the system irreversibly on behalf of `_from`.\"},\"constructor\":{\"notice\":\"Constructor function Initializes contract with initial supply tokens to the creator of the contract\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer tokens Send `_value` tokens to `_to` from your account\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer tokens from other address Send `_value` tokens to `_to` on behalf of `_from`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenERC20.sol\":\"TokenERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/TokenERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface tokenRecipient {\\n  function receiveApproval(\\n    address _from,\\n    uint256 _value,\\n    address _token,\\n    bytes calldata _extraData\\n  ) external;\\n}\\n\\ncontract TokenERC20 {\\n  // Public variables of the token\\n  string public name;\\n  string public symbol;\\n  uint8 public decimals = 18;\\n  // 18 decimals is the strongly suggested default, avoid changing it\\n  uint256 public totalSupply;\\n\\n  // This creates an array with all balances\\n  mapping(address => uint256) public balanceOf;\\n  mapping(address => mapping(address => uint256)) public allowance;\\n\\n  // This generates a public event on the blockchain that will notify clients\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  // This generates a public event on the blockchain that will notify clients\\n  event Approval(\\n    address indexed _owner,\\n    address indexed _spender,\\n    uint256 _value\\n  );\\n\\n  // This notifies clients about the amount burnt\\n  event Burn(address indexed from, uint256 value);\\n\\n  /**\\n   * Constructor function\\n   *\\n   * Initializes contract with initial supply tokens to the creator of the contract\\n   */\\n  constructor(\\n    uint256 initialSupply,\\n    string memory tokenName,\\n    string memory tokenSymbol\\n  ) {\\n    totalSupply = initialSupply * 10**uint256(decimals); // Update total supply with the decimal amount\\n    balanceOf[msg.sender] = totalSupply; // Give the creator all initial tokens\\n    name = tokenName; // Set the name for display purposes\\n    symbol = tokenSymbol; // Set the symbol for display purposes\\n  }\\n\\n  /**\\n   * Internal transfer, only can be called by this contract\\n   */\\n  function _transfer(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  ) internal {\\n    // Prevent transfer to 0x0 address. Use burn() instead\\n    require(_to != address(0x0));\\n    // Check if the sender has enough\\n    require(balanceOf[_from] >= _value);\\n    // Check for overflows\\n    require(balanceOf[_to] + _value >= balanceOf[_to]);\\n    // Save this for an assertion in the future\\n    uint256 previousBalances = balanceOf[_from] + balanceOf[_to];\\n    // Subtract from the sender\\n    balanceOf[_from] -= _value;\\n    // Add the same to the recipient\\n    balanceOf[_to] += _value;\\n    emit Transfer(_from, _to, _value);\\n    // Asserts are used to use static analysis to find bugs in your code. They should never fail\\n    assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\\n  }\\n\\n  /**\\n   * Transfer tokens\\n   *\\n   * Send `_value` tokens to `_to` from your account\\n   *\\n   * @param _to The address of the recipient\\n   * @param _value the amount to send\\n   */\\n  function transfer(address _to, uint256 _value) public returns (bool success) {\\n    _transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * Transfer tokens from other address\\n   *\\n   * Send `_value` tokens to `_to` on behalf of `_from`\\n   *\\n   * @param _from The address of the sender\\n   * @param _to The address of the recipient\\n   * @param _value the amount to send\\n   */\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  ) public returns (bool success) {\\n    require(_value <= allowance[_from][msg.sender]); // Check allowance\\n    allowance[_from][msg.sender] -= _value;\\n    _transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * Set allowance for other address\\n   *\\n   * Allows `_spender` to spend no more than `_value` tokens on your behalf\\n   *\\n   * @param _spender The address authorized to spend\\n   * @param _value the max amount they can spend\\n   */\\n  function approve(address _spender, uint256 _value)\\n    public\\n    returns (bool success)\\n  {\\n    allowance[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * Set allowance for other address and notify\\n   *\\n   * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\\n   *\\n   * @param _spender The address authorized to spend\\n   * @param _value the max amount they can spend\\n   * @param _extraData some extra information to send to the approved contract\\n   */\\n  function approveAndCall(\\n    address _spender,\\n    uint256 _value,\\n    bytes memory _extraData\\n  ) public returns (bool success) {\\n    tokenRecipient spender = tokenRecipient(_spender);\\n    if (approve(_spender, _value)) {\\n      spender.receiveApproval(msg.sender, _value, address(this), _extraData);\\n      return true;\\n    }\\n  }\\n\\n  /**\\n   * Destroy tokens\\n   *\\n   * Remove `_value` tokens from the system irreversibly\\n   *\\n   * @param _value the amount of money to burn\\n   */\\n  function burn(uint256 _value) public returns (bool success) {\\n    require(balanceOf[msg.sender] >= _value); // Check if the sender has enough\\n    balanceOf[msg.sender] -= _value; // Subtract from the sender\\n    totalSupply -= _value; // Updates totalSupply\\n    emit Burn(msg.sender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * Destroy tokens from other account\\n   *\\n   * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\\n   *\\n   * @param _from the address of the sender\\n   * @param _value the amount of money to burn\\n   */\\n  function burnFrom(address _from, uint256 _value)\\n    public\\n    returns (bool success)\\n  {\\n    require(balanceOf[_from] >= _value); // Check if the targeted balance is enough\\n    require(_value <= allowance[_from][msg.sender]); // Check allowance\\n    balanceOf[_from] -= _value; // Subtract from the targeted balance\\n    allowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance\\n    totalSupply -= _value; // Update totalSupply\\n    emit Burn(_from, _value);\\n    return true;\\n  }\\n}\",\"keccak256\":\"0x14b9e4a93b1062004b6e7aea1bfd01e0e85239ba8195aab678d59b4a190a4aff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526012600260006101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b5060405162001b6638038062001b6683398181016040528101906200005391906200024d565b600260009054906101000a900460ff1660ff16600a620000749190620003a1565b83620000819190620004de565b600381905550600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160009080519060200190620000e592919062000108565b508060019080519060200190620000fe92919062000108565b50505050620006c4565b82805462000116906200057f565b90600052602060002090601f0160209004810192826200013a576000855562000186565b82601f106200015557805160ff191683800117855562000186565b8280016001018555821562000186579182015b828111156200018557825182559160200191906001019062000168565b5b50905062000195919062000199565b5090565b5b80821115620001b45760008160009055506001016200019a565b5090565b6000620001cf620001c98462000310565b620002e7565b905082815260208101848484011115620001ee57620001ed6200067d565b5b620001fb84828562000549565b509392505050565b600082601f8301126200021b576200021a62000678565b5b81516200022d848260208601620001b8565b91505092915050565b6000815190506200024781620006aa565b92915050565b60008060006060848603121562000269576200026862000687565b5b6000620002798682870162000236565b935050602084015167ffffffffffffffff8111156200029d576200029c62000682565b5b620002ab8682870162000203565b925050604084015167ffffffffffffffff811115620002cf57620002ce62000682565b5b620002dd8682870162000203565b9150509250925092565b6000620002f362000306565b9050620003018282620005b5565b919050565b6000604051905090565b600067ffffffffffffffff8211156200032e576200032d62000649565b5b62000339826200068c565b9050602081019050919050565b6000808291508390505b6001851115620003985780860481111562000370576200036f620005eb565b5b6001851615620003805780820291505b808102905062000390856200069d565b945062000350565b94509492505050565b6000620003ae826200053f565b9150620003bb836200053f565b9250620003ea7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484620003f2565b905092915050565b600082620004045760019050620004d7565b81620004145760009050620004d7565b81600181146200042d576002811462000438576200046e565b6001915050620004d7565b60ff8411156200044d576200044c620005eb565b5b8360020a915084821115620004675762000466620005eb565b5b50620004d7565b5060208310610133831016604e8410600b8410161715620004a85782820a905083811115620004a257620004a1620005eb565b5b620004d7565b620004b7848484600162000346565b92509050818404811115620004d157620004d0620005eb565b5b81810290505b9392505050565b6000620004eb826200053f565b9150620004f8836200053f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620005345762000533620005eb565b5b828202905092915050565b6000819050919050565b60005b83811015620005695780820151818401526020810190506200054c565b8381111562000579576000848401525b50505050565b600060028204905060018216806200059857607f821691505b60208210811415620005af57620005ae6200061a565b5b50919050565b620005c0826200068c565b810181811067ffffffffffffffff82111715620005e257620005e162000649565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b620006b5816200053f565b8114620006c157600080fd5b50565b61149280620006d46000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a08231146101a357806379cc6790146101d357806395d89b4114610203578063a9059cbb14610221578063cae9ca5114610251578063dd62ed3e14610281576100b4565b806306fdde03146100b9578063095ea7b3146100d757806318160ddd1461010757806323b872dd14610125578063313ce5671461015557806342966c6814610173575b600080fd5b6100c16102b1565b6040516100ce91906110e3565b60405180910390f35b6100f160048036038101906100ec9190610ef2565b61033f565b6040516100fe91906110c8565b60405180910390f35b61010f610431565b60405161011c9190611105565b60405180910390f35b61013f600480360381019061013a9190610e9f565b610437565b60405161014c91906110c8565b60405180910390f35b61015d61056b565b60405161016a9190611120565b60405180910390f35b61018d60048036038101906101889190610fa1565b61057e565b60405161019a91906110c8565b60405180910390f35b6101bd60048036038101906101b89190610e32565b610692565b6040516101ca9190611105565b60405180910390f35b6101ed60048036038101906101e89190610ef2565b6106aa565b6040516101fa91906110c8565b60405180910390f35b61020b6108db565b60405161021891906110e3565b60405180910390f35b61023b60048036038101906102369190610ef2565b610969565b60405161024891906110c8565b60405180910390f35b61026b60048036038101906102669190610f32565b610980565b60405161027891906110c8565b60405180910390f35b61029b60048036038101906102969190610e5f565b610a19565b6040516102a89190611105565b60405180910390f35b600080546102be906112ea565b80601f01602080910402602001604051908101604052809291908181526020018280546102ea906112ea565b80156103375780601f1061030c57610100808354040283529160200191610337565b820191906000526020600020905b81548152906001019060200180831161031a57829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161041f9190611105565b60405180910390a36001905092915050565b60035481565b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156104c257600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461054e919061121f565b92505081905550610560848484610a3e565b600190509392505050565b600260009054906101000a900460ff1681565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156105cc57600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461061b919061121f565b925050819055508160036000828254610634919061121f565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040516106819190611105565b60405180910390a260019050919050565b60046020528060005260406000206000915090505481565b600081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156106f857600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561078157600080fd5b81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107d0919061121f565b9250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610863919061121f565b92505081905550816003600082825461087c919061121f565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040516108c99190611105565b60405180910390a26001905092915050565b600180546108e8906112ea565b80601f0160208091040260200160405190810160405280929190818152602001828054610914906112ea565b80156109615780601f1061093657610100808354040283529160200191610961565b820191906000526020600020905b81548152906001019060200180831161094457829003601f168201915b505050505081565b6000610976338484610a3e565b6001905092915050565b600080849050610990858561033f565b15610a10578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff1660e01b81526004016109d4949392919061107c565b600060405180830381600087803b1580156109ee57600080fd5b505af1158015610a02573d6000803e3d6000fd5b505050506001915050610a12565b505b9392505050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a7857600080fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610ac457600080fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b4f91906111c9565b1015610b5a57600080fd5b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610be691906111c9565b905081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c37919061121f565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c8d91906111c9565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610cf19190611105565b60405180910390a380600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d8491906111c9565b14610d9257610d9161134d565b5b50505050565b6000610dab610da684611160565b61113b565b905082815260208101848484011115610dc757610dc661140e565b5b610dd28482856112a8565b509392505050565b600081359050610de98161142e565b92915050565b600082601f830112610e0457610e03611409565b5b8135610e14848260208601610d98565b91505092915050565b600081359050610e2c81611445565b92915050565b600060208284031215610e4857610e47611418565b5b6000610e5684828501610dda565b91505092915050565b60008060408385031215610e7657610e75611418565b5b6000610e8485828601610dda565b9250506020610e9585828601610dda565b9150509250929050565b600080600060608486031215610eb857610eb7611418565b5b6000610ec686828701610dda565b9350506020610ed786828701610dda565b9250506040610ee886828701610e1d565b9150509250925092565b60008060408385031215610f0957610f08611418565b5b6000610f1785828601610dda565b9250506020610f2885828601610e1d565b9150509250929050565b600080600060608486031215610f4b57610f4a611418565b5b6000610f5986828701610dda565b9350506020610f6a86828701610e1d565b925050604084013567ffffffffffffffff811115610f8b57610f8a611413565b5b610f9786828701610def565b9150509250925092565b600060208284031215610fb757610fb6611418565b5b6000610fc584828501610e1d565b91505092915050565b610fd781611253565b82525050565b610fe681611265565b82525050565b6000610ff782611191565b61100181856111a7565b93506110118185602086016112b7565b61101a8161141d565b840191505092915050565b60006110308261119c565b61103a81856111b8565b935061104a8185602086016112b7565b6110538161141d565b840191505092915050565b61106781611291565b82525050565b6110768161129b565b82525050565b60006080820190506110916000830187610fce565b61109e602083018661105e565b6110ab6040830185610fce565b81810360608301526110bd8184610fec565b905095945050505050565b60006020820190506110dd6000830184610fdd565b92915050565b600060208201905081810360008301526110fd8184611025565b905092915050565b600060208201905061111a600083018461105e565b92915050565b6000602082019050611135600083018461106d565b92915050565b6000611145611156565b9050611151828261131c565b919050565b6000604051905090565b600067ffffffffffffffff82111561117b5761117a6113da565b5b6111848261141d565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006111d482611291565b91506111df83611291565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156112145761121361137c565b5b828201905092915050565b600061122a82611291565b915061123583611291565b9250828210156112485761124761137c565b5b828203905092915050565b600061125e82611271565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156112d55780820151818401526020810190506112ba565b838111156112e4576000848401525b50505050565b6000600282049050600182168061130257607f821691505b60208210811415611316576113156113ab565b5b50919050565b6113258261141d565b810181811067ffffffffffffffff82111715611344576113436113da565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61143781611253565b811461144257600080fd5b50565b61144e81611291565b811461145957600080fd5b5056fea2646970667358221220730904ced2e21dcf7d772c5e3d05b607e9f74f8e4a2abedbca0871b34ed3d26a64736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "_spender": "The address authorized to spend",
          "_value": "the max amount they can spend"
        }
      },
      "approveAndCall(address,uint256,bytes)": {
        "params": {
          "_extraData": "some extra information to send to the approved contract",
          "_spender": "The address authorized to spend",
          "_value": "the max amount they can spend"
        }
      },
      "burn(uint256)": {
        "params": {
          "_value": "the amount of money to burn"
        }
      },
      "burnFrom(address,uint256)": {
        "params": {
          "_from": "the address of the sender",
          "_value": "the amount of money to burn"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "_to": "The address of the recipient",
          "_value": "the amount to send"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "_from": "The address of the sender",
          "_to": "The address of the recipient",
          "_value": "the amount to send"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Set allowance for other address Allows `_spender` to spend no more than `_value` tokens on your behalf"
      },
      "approveAndCall(address,uint256,bytes)": {
        "notice": "Set allowance for other address and notify Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it"
      },
      "burn(uint256)": {
        "notice": "Destroy tokens Remove `_value` tokens from the system irreversibly"
      },
      "burnFrom(address,uint256)": {
        "notice": "Destroy tokens from other account Remove `_value` tokens from the system irreversibly on behalf of `_from`."
      },
      "constructor": {
        "notice": "Constructor function Initializes contract with initial supply tokens to the creator of the contract"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer tokens Send `_value` tokens to `_to` from your account"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer tokens from other address Send `_value` tokens to `_to` on behalf of `_from`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15,
        "contract": "contracts/TokenERC20.sol:TokenERC20",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 17,
        "contract": "contracts/TokenERC20.sol:TokenERC20",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 20,
        "contract": "contracts/TokenERC20.sol:TokenERC20",
        "label": "decimals",
        "offset": 0,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 22,
        "contract": "contracts/TokenERC20.sol:TokenERC20",
        "label": "totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 26,
        "contract": "contracts/TokenERC20.sol:TokenERC20",
        "label": "balanceOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 32,
        "contract": "contracts/TokenERC20.sol:TokenERC20",
        "label": "allowance",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}